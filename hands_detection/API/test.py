import cv2
import numpy as np
from flask import Flask
from flask_sock import Sock
import mediapipe as mp

app = Flask(__name__)
sock = Sock(app)

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.5)

puntos_correctos_a = [
    [0.3899029493331909, 0.5983290076255798, -1.20123183933174e-06],
    [0.5690808296203613, 0.535675048828125, -0.041732121258974075],
    [0.7105618715286255, 0.42577654123306274, -0.0587068572640419],
    [0.8097320795059204, 0.32227039337158203, -0.08518218994140625],
    [0.8850561380386353, 0.24474023282527924, -0.1061994880437851],
    [0.6070766448974609, 0.2799985110759735, 0.0074511184357106686],
    [0.6363704800605774, 0.1799328476190567, -0.07862775772809982],
    [0.6124398708343506, 0.2813684344291687, -0.13215120136737823],
    [0.5889914035797119, 0.3712860643863678, -0.14996717870235443],
    [0.4950551688671112, 0.27106937766075134, -0.003384589683264494],
    [0.5206844210624695, 0.174390971660614, -0.1001226082444191],
    [0.5080667734146118, 0.3120410442352295, -0.13056999444961548],
    [0.4963538944721222, 0.4140177369117737, -0.12443476170301437],
    [0.38234496116638184, 0.2798488736152649, -0.028698114678263664],
    [0.4019307494163513, 0.198895663022995, -0.1230044960975647],
    [0.4116726517677307, 0.33952853083610535, -0.11029388010501862],
    [0.41423308849334717, 0.4368825852870941, -0.07110188156366348],
    [0.26619184017181396, 0.30212387442588806, -0.058157965540885925],
    [0.289226770401001, 0.22362665832042694, -0.11443466693162918],
    [0.31954407691955566, 0.3138759732246399, -0.09318237751722336],
    [0.3327474594116211, 0.3863895535469055, -0.05817060545086861]
]

puntos_correctos_b = [
    (0.4737216532230377, 0.7189333438873291, 6.90875992859219e-07),
    (0.5954307913780212, 0.6289174556732178, -0.04804322496056557),
    (0.6297359466552734, 0.5104575753211975, -0.05840373411774635),
    (0.5362231731414795, 0.4237061142921448, -0.06685004383325577),
    (0.44197750091552734, 0.38224682211875916, -0.0754396915435791),
    (0.6154313683509827, 0.4062630832195282, 0.0011392063461244106),
    (0.6184628009796143, 0.28105002641677856, -0.028587399050593376),
    (0.6097744703292847, 0.20188458263874054, -0.06104413792490959),
    (0.6003618836402893, 0.1312555968761444, -0.08660709857940674),
    (0.5318940281867981, 0.39280617237091064, -0.003886784426867962),
    ( 0.5365020036697388, 0.2518523633480072, -0.03130878508090973),
    ( 0.5363906621932983, 0.15794020891189575, -0.06676267832517624),
    ( 0.5381316542625427, 0.07893595099449158, -0.0927945002913475),
    ( 0.45674648880958557, 0.4055764675140381, -0.01892658695578575),
    ( 0.45775991678237915, 0.27145060896873474, -0.05281488969922066),
    ( 0.4645824730396271, 0.18200251460075378, -0.08650927990674973),
    ( 0.4687820076942444, 0.110536128282547, 0.10771483182907104),
    ( 0.3773486018180847, 0.43878111243247986, -0.03903563320636749),
    ( 0.37309157848358154, 0.3338767886161804, -0.06967679411172867),
    ( 0.3797380328178406, 0.2622144818305969, -0.08655083924531937),
    ( 0.3878788948059082, 0.1989011913537979, -0.097742959856987)
]

puntos_correctos_g = [
    (0.1499578356742859, 0.6198013424873352, -1.6216425535731105e-07),
    (0.17613589763641357, 0.43833181262016296, -0.008004576899111271),
    (0.2570781409740448, 0.32484087347984314, -0.0504334382712841),
    (0.30779772996902466, 0.20919263362884521, -0.09711851179599762),
    (0.3139668107032776, 0.11797559261322021, -0.15168972313404083),
    (0.5148491859436035, 0.43478336930274963, -0.07861003279685974),
    (0.7149568200111389, 0.4182559549808502, -0.1085120365023613),
    (0.8416110277175903, 0.4139935374259949, -0.13085253536701202),
    (0.9375828504562378, 0.41432759165763855, -0.14777396619319916),
    (0.5481654405593872, 0.5398985147476196, -0.08252143859863281),
    (0.6056079864501953, 0.5238259434700012, -0.08995019644498825),
    (0.5379288792610168, 0.5164309144020081, -0.06713094562292099),
    (0.4667598605155945, 0.5200623869895935, -0.056517478078603745),
    (0.5261738896369934, 0.6371786594390869, -0.08188432455062866),
    (0.5623214840888977, 0.6094244122505188, -0.07633541524410248),
    (0.4983066916465759, 0.6077373623847961, -0.03887565806508064),
    (0.42780402302742004, 0.6126453280448914, -0.021520067006349564),
    (0.4890967309474945, 0.7175819873809814, -0.08192101866006851),
    (0.5182593464851379, 0.6998245716094971, -0.06525479257106781),
    (0.46047893166542053, 0.6913840770721436, -0.024474676698446274),
    (0.4040120840072632, 0.6924404501914978, 0.003510069102048874),
]



def comparar_puntos(mano_actual, puntos_correctos, tolerancia=0.05):
    for i, punto_correcto in enumerate(puntos_correctos):
        if not np.allclose([mano_actual[i].x, mano_actual[i].y, mano_actual[i].z], punto_correcto, atol=tolerancia):
            return False
    return True

def comparar_conjuntos_puntos(mano_actual, conjuntos_puntos_correctos, tolerancia=0.2):
    for index, conjunto in enumerate(conjuntos_puntos_correctos):
        if comparar_puntos(mano_actual, conjunto, tolerancia):
            print(f"Conjunto detectado: {index}")
            return index  # Devuelve el Ã­ndice del conjunto detectado
    return -1 

conjuntos_puntos_correctos = [puntos_correctos_a, puntos_correctos_b, puntos_correctos_g]

@sock.route('/video-stream')
def video_stream(ws):
    while True:
        data = ws.receive()
        if data:
            # Decodificar frame
            np_frame = np.frombuffer(data, np.uint8)
            frame = cv2.imdecode(np_frame, cv2.IMREAD_COLOR)

            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            resultado = hands.process(rgb_frame)

            if resultado.multi_hand_landmarks:
                for hand_landmarks in resultado.multi_hand_landmarks:
                    # Dibujamos las conexiones de la mano
                    mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

                    # Extraemos los puntos actuales de la mano
                    puntos_mano = hand_landmarks.landmark

                    conjunto_detectado = comparar_conjuntos_puntos(puntos_mano, conjuntos_puntos_correctos)
                    print(f"Conjunto detectado: {conjunto_detectado}")
                    if conjunto_detectado != -1:
                        if conjunto_detectado == 0:
                            ws.send("a")
                        elif conjunto_detectado == 1:
                            ws.send("b")
                        elif conjunto_detectado == 2:
                            ws.send("g")
                    else:
                        ws.send("Sin letra detectada")

            
        else:
            break
if __name__ == '__main__':
    app.run(debug=True)
